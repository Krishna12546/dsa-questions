import java.io.*;
import java.util.*;

public class ChefAndRedBlackTree {
    static int[] red, black;
    static int[] parent;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int Q = scanner.nextInt();

        red = new int[2 * Q + 1];
        black = new int[2 * Q + 1];
        parent = new int[2 * Q + 1];

        // Initialize BIT arrays
        Arrays.fill(black, 1);
        for (int i = 1; i <= 2 * Q; i++) {
            parent[i] = i / 2;
        }

        while (Q-- > 0) {
            char queryType = scanner.next().charAt(1);
            if (queryType == 'i') {
                toggleColors();
            } else {
                int x = scanner.nextInt();
                int y = scanner.nextInt();
                if (queryType == 'b') {
                    System.out.println(countNodes(x, y, black));
                } else {
                    System.out.println(countNodes(x, y, red));
                }
            }
        }
        scanner.close();
    }

    static void toggleColors() {
        for (int i = 1; i < red.length; i++) {
            if (red[i] == 1) {
                red[i] = 0;
                black[i] = 1;
            } else {
                red[i] = 1;
                black[i] = 0;
            }
        }
    }

    static int countNodes(int x, int y, int[] color) {
        int count = 0;
        while (x != y) {
            if (x > y) {
                if (x % 2 == 1) count += color[x];
                x = parent[x];
            } else {
                if (y % 2 == 1) count += color[y];
                y = parent[y];
            }
        }
        count += color[x]; // Count for the common ancestor
        return count;
    }
}
